using System;
using Codebase.Domain.Gameplay;
using Codebase.Views.Gameplay;
using UnityEngine;

namespace Codebase.Infrastructure.Services
{
    public enum WinCondition
    {
        None,
        MafiaWins,          // –ú–∞—Ñ–∏—è —É–±–∏–ª–∞ –≤—Å–µ—Ö –∏–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        CiviliansWin,       // –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        PoliceWins,         // –í—Å–µ—Ö –º–∞—Ñ–æ–≤ –Ω–∞—à–ª–∏ –∏ –∏—Å–∫–ª—é—á–∏–ª–∏
        TasksCompleted      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–±–µ–¥–∞ –º–∏—Ä–Ω—ã—Ö - –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    }

    public class GameWinConditionService
    {
        private readonly CharacterLifecycleService _characterLifecycleService;
        private readonly TaskProgressService _taskProgressService;

        private WinCondition _currentWinCondition = WinCondition.None;
        private bool _gameEnded = false;

        // –°–æ–±—ã—Ç–∏—è
        public event Action<WinCondition> GameWon;
        public event Action<WinCondition, string> WinConditionChecked; // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        public WinCondition CurrentWinCondition => _currentWinCondition;
        public bool IsGameEnded => _gameEnded;

        public GameWinConditionService(CharacterLifecycleService characterLifecycleService, TaskProgressService taskProgressService)
        {
            _characterLifecycleService = characterLifecycleService ?? throw new ArgumentNullException(nameof(characterLifecycleService));
            _taskProgressService = taskProgressService ?? throw new ArgumentNullException(nameof(taskProgressService));

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            _characterLifecycleService.CharacterKilled += OnCharacterKilled;
            _characterLifecycleService.RoleCountChanged += OnRoleCountChanged;
            _taskProgressService.AllTasksCompleted += OnAllTasksCompleted;
        }

        public void CheckWinConditions()
        {
            if (_gameEnded)
                return;

            var winCondition = EvaluateWinCondition();
            
            if (winCondition != WinCondition.None)
            {
                EndGame(winCondition);
            }
        }

        private WinCondition EvaluateWinCondition()
        {
            int aliveMafia = _characterLifecycleService.GetAliveCount(Role.Mafia);
            int alivePolice = _characterLifecycleService.GetAliveCount(Role.Police);
            int aliveCivilians = _characterLifecycleService.GetAliveCount(Role.Civilian);
            int aliveTotal = aliveMafia + alivePolice + aliveCivilians;
            int aliveNonMafia = alivePolice + aliveCivilians;

            string status = $"Alive - Mafia: {aliveMafia}, Police: {alivePolice}, Civilians: {aliveCivilians}";
            WinConditionChecked?.Invoke(WinCondition.None, status);

            // 1. –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞: –º–∞—Ñ–æ–≤ >= –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –≤—Å–µ –Ω–µ-–º–∞—Ñ—ã –º–µ—Ä—Ç–≤—ã
            if (aliveMafia > 0 && (aliveMafia >= aliveNonMafia || aliveNonMafia == 0))
            {
                return WinCondition.MafiaWins;
            }

            // 2. –ú–∞—Ñ–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
            if (aliveMafia == 0 && aliveNonMafia > 0)
            {
                return WinCondition.PoliceWins;
            }

            // 3. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            if (_taskProgressService.AreAllTasksCompleted())
            {
                return WinCondition.TasksCompleted;
            }

            // 4. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –º–µ—Ä—Ç–≤—ã (–Ω–∏—á—å—è, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∞ –º–∞—Ñ–∏–∏)
            if (aliveTotal == 0)
            {
                return WinCondition.MafiaWins;
            }

            return WinCondition.None;
        }

        private void EndGame(WinCondition winCondition)
        {
            _gameEnded = true;
            _currentWinCondition = winCondition;

            string message = GetWinMessage(winCondition);
            Debug.Log($"[GameWinConditionService] {message}");

            GameWon?.Invoke(winCondition);
        }

        private string GetWinMessage(WinCondition winCondition)
        {
            return winCondition switch
            {
                WinCondition.MafiaWins => "üî¥ –ú–ê–§–ò–Ø –ü–û–ë–ï–î–ò–õ–ê! –ó–ª–æ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–æ!",
                WinCondition.PoliceWins => "üîµ –ü–û–õ–ò–¶–ò–Ø –ü–û–ë–ï–î–ò–õ–ê! –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞!",
                WinCondition.CiviliansWin => "üü¢ –ú–ò–†–ù–´–ï –ü–û–ë–ï–î–ò–õ–ò! –î–æ–±—Ä–æ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–æ!",
                WinCondition.TasksCompleted => "‚öôÔ∏è –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´! –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!",
                _ => "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            };
        }

        private void OnCharacterKilled(CharacterView character)
        {
            Debug.Log($"[GameWinConditionService] Character killed: {character.Character.Role}");
            CheckWinConditions();
        }

        private void OnRoleCountChanged(Role role, int aliveCount)
        {
            Debug.Log($"[GameWinConditionService] Role count changed: {role} = {aliveCount}");
            CheckWinConditions();
        }

        private void OnAllTasksCompleted()
        {
            Debug.Log("[GameWinConditionService] All tasks completed!");
            CheckWinConditions();
        }

        public void ResetGame()
        {
            _gameEnded = false;
            _currentWinCondition = WinCondition.None;
            Debug.Log("[GameWinConditionService] Game reset");
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–±–µ–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        public void ForceWin(WinCondition winCondition)
        {
            Debug.Log($"[GameWinConditionService] Forced win: {winCondition}");
            EndGame(winCondition);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
        public string GetGameStatus()
        {
            if (_gameEnded)
            {
                return GetWinMessage(_currentWinCondition);
            }

            int aliveMafia = _characterLifecycleService.GetAliveCount(Role.Mafia);
            int alivePolice = _characterLifecycleService.GetAliveCount(Role.Police);
            int aliveCivilians = _characterLifecycleService.GetAliveCount(Role.Civilian);
            int tasksProgress = _taskProgressService.OverallProgress;

            return $"üë• –ú–∞—Ñ–∏—è: {aliveMafia} | üëÆ –ü–æ–ª–∏—Ü–∏—è: {alivePolice} | üë§ –ú–∏—Ä–Ω—ã–µ: {aliveCivilians} | ‚öôÔ∏è –ó–∞–¥–∞—á–∏: {tasksProgress}%";
        }

        public void Dispose()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            if (_characterLifecycleService != null)
            {
                _characterLifecycleService.CharacterKilled -= OnCharacterKilled;
                _characterLifecycleService.RoleCountChanged -= OnRoleCountChanged;
            }

            if (_taskProgressService != null)
            {
                _taskProgressService.AllTasksCompleted -= OnAllTasksCompleted;
            }
        }
    }
} 