using System;
using Codebase.Controllers;
using UnityEngine;

namespace Codebase.Infrastructure.Services
{
    public class GamePhaseService
    {
        private GamePhase _currentPhase = GamePhase.Day;
        private float _phaseTimeRemaining;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–∑
        private readonly float _dayDuration = 120f;
        private readonly float _nightDuration = 60f;
        private readonly float _votingDuration = 30f;

        // –°–æ–±—ã—Ç–∏—è
        public event Action<GamePhase> PhaseChanged;
        public event Action<GamePhase, float> PhaseTimeUpdated;
        public event Action<string> GameMessage;

        public GamePhase CurrentPhase => _currentPhase;
        public float PhaseTimeRemaining => _phaseTimeRemaining;

        public void StartDay()
        {
            SetPhase(GamePhase.Day, _dayDuration);
            GameMessage?.Invoke("üåû –î–ï–ù–¨ –ù–ê–ß–ê–õ–°–Ø! –ì—Ä–∞–∂–¥–∞–Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –º–∞–Ω—å—è–∫ —Å–∞–±–æ—Ç–∏—Ä—É–µ—Ç!");
            Debug.Log("[GamePhaseService] Day phase started");
        }

        public void StartNight()
        {
            SetPhase(GamePhase.Night, _nightDuration);
            GameMessage?.Invoke("üåô –ù–û–ß–¨ –ù–ê–ß–ê–õ–ê–°–¨! –ú–∞–Ω—å—è–∫ –æ—Ö–æ—Ç–∏—Ç—Å—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–∂–∏–≤–∞—é—Ç!");
            Debug.Log("[GamePhaseService] Night phase started");
        }

        public void StartVoting()
        {
            SetPhase(GamePhase.Voting, _votingDuration);
            GameMessage?.Invoke("üó≥Ô∏è –ì–û–õ–û–°–û–í–ê–ù–ò–ï! –ö—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π?");
            Debug.Log("[GamePhaseService] Voting phase started");
        }

        public void StartGameOver()
        {
            SetPhase(GamePhase.GameOver, 0f);
            Debug.Log("[GamePhaseService] Game over");
        }

        public void Update(float deltaTime)
        {
            if (_currentPhase == GamePhase.GameOver)
                return;

            _phaseTimeRemaining -= deltaTime;
            PhaseTimeUpdated?.Invoke(_currentPhase, _phaseTimeRemaining);

            if (_phaseTimeRemaining <= 0f)
            {
                SwitchToNextPhase();
            }
        }

        private void SetPhase(GamePhase phase, float duration)
        {
            _currentPhase = phase;
            _phaseTimeRemaining = duration;
            PhaseChanged?.Invoke(phase);
        }

        private void SwitchToNextPhase()
        {
            switch (_currentPhase)
            {
                case GamePhase.Day:
                    StartNight();
                    break;
                case GamePhase.Night:
                    StartVoting();
                    break;
                case GamePhase.Voting:
                    StartDay();
                    break;
            }
        }

        public void ForcePhaseChange()
        {
            _phaseTimeRemaining = 0f;
        }

        public void SetPhaseDuration(GamePhase phase, float duration)
        {
            // –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–∑ –∏–∑–≤–Ω–µ
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        }
    }
} 